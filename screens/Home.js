import React, {Component} from 'react';
import styled from 'styled-components';
import {View, Text, Image} from 'react-native';
import {db} from '../config.js';
import veg from './veg.png';
import phone from './phone.png';

var PushNotification = require('react-native-push-notification');

PushNotification.configure({
  // (optional) Called when Token is generated (iOS and Android)
  onRegister: function(token) {
    console.log('TOKEN:', token);
  },

  // (required) Called when a remote or local notification is opened or received
  onNotification: function(notification) {
    console.log('NOTIFICATION:', notification);

    // process the notification
  },

  // Should the initial notification be popped automatically
  // default: true
  popInitialNotification: true,

  /**
   * (optional) default: true
   * - Specified if permissions (ios) and token (android and ios) will requested or not,
   * - if not, you must call PushNotificationsHandler.requestPermissions() later
   */
  requestPermissions: true,
});

var ref = db.ref('/');

class Home extends Component {
  static navigationOptions = {
    title: 'Home',
    headerStyle: {
      display: 'none',
    },
  };
  state = {bucket1: false, bucket2: false, messages: []};

  componentDidMount() {
    var risk = parseFloat(this.props.navigation.getParam('riskAssessed'));
    console.log(risk);
    if (risk >= 0.65) {
      this.setState({bucket1: true, bucket2: false});
    } else if (0.35 <= risk && risk < 0.65) {
      this.setState({bucket1: false, bucket2: true});
    } else if (risk < 0.35) {
      this.setState({bucket1: false, bucket2: true});
    }
    ref.on('child_added', snapshot => {
      this.setState({messages: snapshot.val()});
    });
  }

  notify1 = () => {
    PushNotification.localNotification({
      /* Android Only Properties */
      id: '0', // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
      ticker: 'My Notification Ticker', // (optional)
      autoCancel: true, // (optional) default: true
      largeIcon: 'ic_launcher', // (optional) default: "ic_launcher"
      smallIcon: 'ic_notification', // (optional) default: "ic_notification" with fallback for "ic_launcher"
      subText: 'Achilles', // (optional) default: none
      color: '#4299e1', // (optional) default: system default
      ongoing: false, // (optional) set whether this is an "ongoing" notification
      /* iOS and Android properties */
      title: 'Dr. Su is checking in', // (optional)
      message:
        'Have you experienced leg or foot numbness or tingling recently?', // (required)
      playSound: false, // (optional) default: true
      actions: '["Yes", "No"]', // (Android only) See the doc for notification actions to know more
    });
  };

  notify2 = () => {
    PushNotification.localNotification({
      /* Android Only Properties */
      id: '0', // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
      ticker: 'My Notification Ticker', // (optional)
      autoCancel: true, // (optional) default: true
      largeIcon: 'ic_launcher', // (optional) default: "ic_launcher"
      smallIcon: 'ic_notification', // (optional) default: "ic_notification" with fallback for "ic_launcher"
      subText: 'Achilles', // (optional) default: none
      color: '#4299e1', // (optional) default: system default
      ongoing: false, // (optional) set whether this is an "ongoing" notification
      /* iOS and Android properties */
      title: 'Medication reminder', // (optional)
      message: 'You set a reminder about your medication, have you taken it?', // (required)
      playSound: false, // (optional) default: true
      actions: '["Yes", "No"]', // (Android only) See the doc for notification actions to know more
    });
  };

  render() {
    return (
      <AppContainer>
        <Header>
          Today's Care for {this.props.navigation.getParam('name')}
        </Header>
        {this.state.bucket1 ? (
          <View>
            <TipTitleBox1>
              <Circle>
                <NumberText1>1</NumberText1>
              </Circle>
              <TipTitle>Eat at least 2 cups of vegetables</TipTitle>
            </TipTitleBox1>
            <TipBox1>
              <View
                style={{flexDirection: 'row', justifyContent: 'space-around'}}>
                <SubText1>
                  Your doctor recommends that you eat at least 2 servings of
                  vegetables per day. The picture on the right shows 1 serving.
                </SubText1>
                <Image
                  source={veg}
                  style={{width: 120, height: 120, margin: 20}}></Image>
              </View>
            </TipBox1>
            <SecondaryTipTitleBox1>
              <Circle>
                <NumberText1>2</NumberText1>
              </Circle>
              <TipTitle>Thoroughly wash your feet</TipTitle>
            </SecondaryTipTitleBox1>
            <SecondaryTipTitleBox1>
              <Circle>
                <NumberText1>3</NumberText1>
              </Circle>
              <TipTitle>Wear comfortable shoes at all times</TipTitle>
            </SecondaryTipTitleBox1>
            <View
              style={{flexDirection: 'row', justifyContent: 'space-between'}}>
              <ContactDoc>
                <SubText>
                  Contact your doctor if you are experiencing numbness,
                  tingling, dry skin, or sores in your legs or feet.
                </SubText>
              </ContactDoc>
              <PhoneWrapper>
                <Image source={phone} style={{width: 30, height: 30}} />
              </PhoneWrapper>
            </View>
            <Message>
              {this.state.messages.length > 0
                ? 'New message: ' + this.state.messages
                : ''}
            </Message>
          </View>
        ) : this.state.bucket2 ? (
          <View>
            <SecondaryTipTitleBox2>
              <Circle>
                <NumberText2>1</NumberText2>
              </Circle>
              <TipTitle>Treat dry or cracking skin with lotion</TipTitle>
            </SecondaryTipTitleBox2>
            <SecondaryTipTitleBox2>
              <Circle>
                <NumberText2>2</NumberText2>
              </Circle>
              <TipTitle>Run or walk outside for 20 minutes</TipTitle>
            </SecondaryTipTitleBox2>
            <SecondaryTipTitleBox2>
              <Circle>
                <NumberText2>3</NumberText2>
              </Circle>
              <TipTitle>Eat at least 3 servings of fresh vegetables</TipTitle>
            </SecondaryTipTitleBox2>
            <Message>
              {this.state.messages.length > 0
                ? 'New message: ' + this.state.messages
                : ''}
            </Message>
            <Remind1 onPress={this.notify1}>
              <Text>Doctor Remind</Text>
            </Remind1>
            <Remind2 onPress={this.notify2}>
              <Text>Patient Remind</Text>
            </Remind2>
          </View>
        ) : null}
      </AppContainer>
    );
  }
}

const AppContainer = styled.View`
  padding: 50px 12px 0px;
`;

const Header = styled.Text`
  font-family: UberMoveText-Bold;
  font-size: 24px;
  margin-bottom: 35px;
`;

const Message = styled.Text`
  font-family: UberMoveText-Bold;
  font-size: 16px;
  margin-top: 20px;
`;

const TipBox = styled.View`
  width: auto;
  height: 250px;
  border-bottom-left-radius: 6px;
  border-bottom-right-radius: 6px;
  border: solid 2px #4299e1;
  margin-bottom: 5px;
`;

const TipBox1 = styled(TipBox)`
  border: solid 2px #4299e1;
`;

const TipBox2 = styled(TipBox)`
  border: solid 2px #d69e2e;
`;

const TipTitleBox = styled.View`
  width: auto;
  height: 60px;
  border-top-left-radius: 6px;
  border-top-right-radius: 6px;
  align-items: center;
  flex-direction: row;
`;

const TipTitleBox1 = styled(TipTitleBox)`
  background-color: #4299e1;
`;

const TipTitleBox2 = styled(TipTitleBox)`
  background-color: #d69e2e;
`;

const SecondaryTipTitleBox = styled.View`
  width: auto;
  height: 60px;
  border-radius: 6px;
  align-items: center;
  flex-direction: row;
  margin-top: 5px;
  margin-bottom: 5px;
`;

const SecondaryTipTitleBox1 = styled(SecondaryTipTitleBox)`
  background-color: #4299e1;
`;

const SecondaryTipTitleBox2 = styled(SecondaryTipTitleBox)`
  background-color: #d69e2e;
`;

const TipTitle = styled.Text`
  font-family: UberMoveText-Medium;
  font-size: 16px;
  line-height: 28px;
  letter-spacing: -0.2px;
  color: #ffffff;
`;

const Circle = styled.View`
  width: 25px;
  height: 25px;
  border-radius: 12.5px;
  background-color: #ffffff;
  margin: 15px;
  align-items: center;
  justify-content: center;
`;

const NumberText = styled.Text`
  font-family: UberMoveText-Medium;
  font-size: 16px;
  line-height: 28px;
  letter-spacing: 0.5px;
  text-align: center;
`;

const NumberText1 = styled(NumberText)`
  color: #4299e1;
`;

const NumberText2 = styled(NumberText)`
  color: #d69e2e;
`;

const SubText = styled.Text`
  font-family: UberMoveText-Regular;
  font-size: 14px;
  line-height: 20px;
  letter-spacing: -0.2px;
`;

const SubText1 = styled.Text`
  font-size: 18px;
  width: 50%;
  margin: 20px;
`;

const ContactDoc = styled.View`
  width: 75%;
  height: auto;
  border-radius: 6px;
  background-color: #edf2f7;
  padding: 8px;
  margin-top: 5px;
`;

const PhoneWrapper = styled.View`
  background-color: #edf2f7;
  width: 76px;
  height: 76px;
  border-radius: 38px;
  align-items: center;
  justify-content: center;
  margin-top: 5px;
`;

const Remind1 = styled.TouchableOpacity`
  position: absolute;
  bottom: -450;
  left: 20;
`;

const Remind2 = styled.TouchableOpacity`
  position: absolute;
  bottom: -450;
  right: 20;
`;

export default Home;
